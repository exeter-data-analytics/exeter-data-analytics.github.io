[
  {
    "objectID": "posts/intro_to_projects/index.html",
    "href": "posts/intro_to_projects/index.html",
    "title": "intRos: Managing research projects with R Studio",
    "section": "",
    "text": "When we‚Äôre doing research, we often find ourselves working on more than one research project at time. Managing multiple folders of data and code can be confusing enough, but when we throw R into the mix, things can get messy very quickly. A large part of the confusion comes from how most folks manage research projects on their own system ‚Äî which was been aptly summarised by the wonderful Jenny Bryan:\n\nIf the first line of your R script is\nsetwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\nI will come into your office and SET YOUR COMPUTER ON FIRE üî•.\nIf the first line of your R script is\nrm(list = ls())\nI will come into your office and SET YOUR COMPUTER ON FIRE üî•.\n\nWhile I won‚Äôt come and set your computer on fire (especially because I have committed both of these coding crimes in the past), I do want to teach you about two really useful tools for making your life easier for managing research projects, and much nicer for sharing code with collaborators.These two tools are R Studio projects and the here package."
  },
  {
    "objectID": "posts/intro_to_projects/index.html#the-magic-of-rstudio-and-projects",
    "href": "posts/intro_to_projects/index.html#the-magic-of-rstudio-and-projects",
    "title": "intRos: Managing research projects with R Studio",
    "section": "The Magic of RStudio and Projects",
    "text": "The Magic of RStudio and Projects\nR Studio is great, and if you don‚Äôt already use it I‚Äôd highly recommend starting now! R Studio is what we‚Äôd call a IDE (Integrated Development Environment) that allows us to integrate with R to do much more than execute code. Despite its wide use in the science community, there‚Äôs one bit of functionality that seems to regularly overlooked by many folks: ‚ÄúProjects‚Äù. These files ‚Äî which you can start to explore from the drop-down menu in the top-right of R Studio ‚Äî are designed for compartmentalising your work into separate contexts, which are great if you have multiple research projects on the go at once.\nRStudio projects resolve the issue of rm(list = ls()) by creating a separate R Studio instance for each new project, each with its own R session, environment, temporary files and working directory (see next section on the ‚Äòhere‚Äô package for more on filepaths).\nIf we navigate to New Project... (either from File or the drop-down Projects toolbar in the top-right), we are given the option of creating a new R Studio project in one of three ways:\n\nNew directory (i.e.¬†start from an empty folder)\nExisting directory (when you already have a folder of code and data that you want to turn into a project)\nVersion control (when you want to start version control of a project ‚Äî see Next steps section for more info on this)\n\nMost of the time you‚Äôll be starting a new project in an empty folder, so we‚Äôll use the New Directory option:\n\n\n\n\n\nNext you‚Äôre provided with a bunch of alternate project types, but we‚Äôll go for the New Project option:\n\n\n\n\n\nLastly, we get to choose the directory name (this is the name the project folder will have, so make sure it identifies your project clearly) and where this directory will be saved (i.e where on your computer you want to keep your research project folders):\nNote: If you tick the box to open in a new session (circled red), whatever you‚Äôre currently working on in R Studio won‚Äôt have to be saved and closed.\n\n\n\n\n\nAnd that‚Äôs it! You now have a nice folder ready to fill with data and code, and never need to use rm(list = ls()) ever again. R Studio also did a couple of things for us in the background when we hit the Create Project button:\n\nCreated an .Rproj file in the top level of the folder (can be used to directly open each project in a new session, and also contains various options for project-specific settings)\nCreated a hidden directory .Rproj.user where project-specific temporary files are stored (useful if you have a session terminate unexpectedly)\nLoaded the project into R Studio, with the project name displayed in the Projects toolbar (top-right) and also in front of the RStudio icon in the task bar (appearance differs between macOS and Windows)\nWhile your root filepath would normally have started at the top of your disk drive, it should now start wherever the Project‚Äôs .Rproj file is (you‚Äôll see this pathn when you first load here). So no more writing ‚Äî C:\\extremely\\long\\filepath\\that\\only\\I\\have every time (BUT see next section on the here package for making this even better)."
  },
  {
    "objectID": "posts/intro_to_projects/index.html#best-practices-for-structuring-project-folders",
    "href": "posts/intro_to_projects/index.html#best-practices-for-structuring-project-folders",
    "title": "intRos: Managing research projects with R Studio",
    "section": "Best practices for structuring project folders",
    "text": "Best practices for structuring project folders\nOnce a project is created, it‚Äôs worth adding folders to contain each of the relevant types of data for your research. For most of us this usually means something like the following: raw_data, code, outputs (folders should only contain data relevant to the research project).\n\n\n\n\n\nExample of what your sub-folders might look like inside your Project folder (adapted from Martin Chan‚Äôs beginner‚Äôs guide to using R Studio projects)"
  },
  {
    "objectID": "posts/intro_to_projects/index.html#building-robust-filepaths-with-the-here-package",
    "href": "posts/intro_to_projects/index.html#building-robust-filepaths-with-the-here-package",
    "title": "intRos: Managing research projects with R Studio",
    "section": "Building robust filepaths with the here package",
    "text": "Building robust filepaths with the here package\nR Studio projects go a long way to making simpler filepaths for our code by removing the need for absolute filepaths (which are specific to your system), and introducing relative filepaths (i.e.¬†ones that start at the location of .Rproj file). That said, we can make things even better and more reproducible by making use of the here package. here helps make filepaths consistent between different operating systems. For example, while macOS users have filepaths separated by forward slashes (/), windows users have filepaths with backward slashes (\\). This means that even with the shorter relative filepaths we get when using Projects, paths like raw_data/2023.csv will only work for macOS users, and if you share this fragile code with someone using Windows it will just throw errors.\nIn comes the here package to the rescue ‚Äî we can use it to make reproducible filepaths that work for everyone! here works in a similar way to file.path, where we build a path to a folder or file by listing elements of the path as arguments. For example, if we had some data in a project sub folder of raw_data called 2023.csv, we‚Äôd make a reproducible filepath to it by writing here(\"raw_data, \"2023.csv\"). here does some helpful stuff in the background by a) adding our project‚Äôs root directory (which you can look at by just running here()), b) starts evaluating path from the project up (which file.path doesn‚Äôt), and c) all while using the right / or \\ delimiter depending on your system!\nWhen you want to actually use a filepath for say, reading some data with read_csv, you just have to provide the here function and folder arguments wherever you‚Äôd normally be putting a Users/stephen's/long/winded/filepath/to/a/file:\n\ninstall.packages(\"here\") #install\nlibrary(here) #load\n\nhere() #this will magically show the project root directory on your machine\nhere(\"raw_data\", \"2019.csv\") #this builds a filepath for where you want to go\nread_csv(file = here(\"raw_data\", \"2019.csv\")) #build this same filepath in read_csv"
  },
  {
    "objectID": "posts/intro_to_projects/index.html#next-steps",
    "href": "posts/intro_to_projects/index.html#next-steps",
    "title": "intRos: Managing research projects with R Studio",
    "section": "Next steps",
    "text": "Next steps\nUsing these two sets of tools together, you‚Äôre now primed to do some reproducible science on as many different projects as you want! But how can we go about sharing this with other researchers if we wanted to? While you can technically share the entire project folder with collaborators directly, we can also use version control software and online repositories to manage changes to our code and make it accessible. The main way folks do this is using git and GitHub, and we will do a later post on how to get set up with both in due course.\nintRo to using git, GitHub & R Studio (post coming soon)"
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html",
    "href": "posts/intro_to_ggplot2/index.html",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "",
    "text": "I love making graphs! To explore data, to plot model results, just for the fun of making plots. I imagine we have all spent a huge amount of time making our plots ready for publication. Here we have a quick walkthrough of using ggplot2 to create graphs for publication, and a few tips and tricks we have learned along the way. If you have a favourite ggplot2 trick or tip then we would love for you to get in contact with us and for you add it to this walkthrough. Or if you‚Äôre feeling adventurous, clone the GitHub repo, add in your tip, re-render this quarto post, commit and push the changes, and start a Pull Request!\nggplot2 is a popular data visualisation package in R that allows users to create high-quality and customisable graphics for data exploration, scientific publications, and presentations. Developed by Hadley Wickham, ggplot2 is built on the principles of the Grammar of Graphics, which defines a set of rules for constructing and interpreting visualisations. With ggplot2, users can easily create a wide range of plots with advanced features such as facets, themes, and labels. Whether you are at the beginning of your science journey, or an old and grumpy PI, ggplot2 provides a powerful and flexible tool for visualising data and gaining insights from it.\nMaking a ggplot2 is like writing and following a recipe. You start with the first instructions (a call to ggplot()), the next instruction (like the next item of the recipe) is signalled using a +, a new line, and new instructions are added sequentially. ggplot2 works in a sequential fashion, later instructions add to what is already there, and sometimes counteract or override what previous instructions.\n\n\n\nMaking a plot using ggplot2 works much like a recipe"
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html#preparing-your-dataset-for-ggplot2",
    "href": "posts/intro_to_ggplot2/index.html#preparing-your-dataset-for-ggplot2",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "Preparing your dataset for ggplot2",
    "text": "Preparing your dataset for ggplot2\nFor ggplot2, your data wants to be organised in long format, as opposed to wide."
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html#make-a-first-plot-using-ggplot2",
    "href": "posts/intro_to_ggplot2/index.html#make-a-first-plot-using-ggplot2",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "Make a first plot using ggplot2",
    "text": "Make a first plot using ggplot2\nWe will make a boxplot of how bill length changes between different species of penguin and add the raw points over the top. After making an initial plot call using ggplot(), different types of plot are specified using a geom_ function (e.g.¬†geom_boxplot() for boxplots, geom_point() for points, geom_line() for a line graph). In each layer, the aes() function is used to tell ggplot2 which arguments depend on aspects of the dataset (e.g.¬†col = species). Arguments set outside of aes() do not rely on the dataset (e.g.¬†size = 3, col = ‚Äòblack‚Äô).\n\n# make first box plot with raw points\nggplot(d, aes(species, bill_length_mm, col = species)) + # add first empty plot layer\n  geom_boxplot(outlier.shape = NA) + # add boxplot, do not plot the outliers\n  geom_jitter(width = 0.2) # add jittered raw points\n\n\n\n\n\n\n\n\nOk this looks nice. Here I put the aes() commands inside the original call to ggplot() as then those arguments are passed to all other layers (unless overridden by another aes()). This looks quite nice, but we can change a bunch of other things to make it look nicer."
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html#adding-extra-layers-to-ggplot2",
    "href": "posts/intro_to_ggplot2/index.html#adding-extra-layers-to-ggplot2",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "Adding extra layers to ggplot2",
    "text": "Adding extra layers to ggplot2\nThere are a bunch of things I do as standard when I am making a plot (and a boxplot in particular):\n\nChange the axis labels\nRemove the legend if not needed\nChange the axis limits\nChange the theme and the text size\nI dislike the default box plot so I colour the whole thing and then add a median bar in white (see below)\n\nThe important thing is to create your own style. To do what you think looks best, but all the options are documented nicely on their website. There are many more detailed resources around, so instead here we will document common things we do.\n\n# make next box plot with raw points\np1 &lt;- ggplot(d, aes(species, bill_length_mm, col = species, fill = species)) + # add first empty plot layer\n  geom_boxplot(outlier.shape = NA) + # add boxplot, do not plot the outliers\n  stat_summary(geom = \"crossbar\", fatten = 2, color = \"white\", width = 0.4, \n               fun.data = function(x){return(c(y = stats::median(x), ymin = stats::median(x), ymax = stats::median(x)))}) + # add median line to the boxplots\n  geom_jitter(width = 0.2, shape = 21, fill = 'white') + # add jittered raw points\n  theme_bw(base_size = 14) + # change theme to the one I like (others are available)\n  labs(x = 'Species',\n       y = 'Bill length (mm)',\n       title = 'Do different penguin species have different bill lengths?') + # change labels\n  ylim(c(30,65)) + # change y limits\n  guides(col = 'none',\n         fill = 'none') # turn off legend\n\np1\n\n\n\n\n\n\n\n\nAnd there - with relatively few lines of code - we have a plot that is ready for inserting into a publication. This can be easily saved out using ggsave()\n\n# save out plot using ggsave\nggsave('plot_one.png', p1, width = 5, height = 7)"
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html#our-favourite-tips-and-tricks-when-making-plots",
    "href": "posts/intro_to_ggplot2/index.html#our-favourite-tips-and-tricks-when-making-plots",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "Our favourite tips and tricks when making plots",
    "text": "Our favourite tips and tricks when making plots\nI have a set of rules I follow when making plots with ggplot2. Some may be different to yours but they might have some use:\n\nGenerally I make my datasets BEFORE they go into ggplot2. This includes checking for NA and Inf values as these are super important to know about when visualising and analysing your data!\n\nPlot the raw data whenever possible.\n\nLayers work iteratively (later layers go on top of earlier layers) so make sure layers you want to be in the background (e.g.¬†boxplot) are before layers you want to overlay (e.g.¬†the raw data)\nOnly use stat_smooth() for exploring datasets. When plotting model predictions and confidence intervals, create a dataframe for them and then feed that into ggplot2.\n\n\nConvert text size in geom_label() or geom_text() to pts used for labels\nLets say we wanted to add text to the plot. For example, in the plot above maybe we want to add the total number of penguins sampled for each species. By default geom_text() and geom_label() use a size guide that is different to the font size set for the axis and tick labels. However, Andrew Heiss has written a function to convert between those so we can easily define the font size in the regular way.\nWe will use functions from the tidyverse to create a data frame with the total number of penguins sampled and the max bill length for each penguin. Creating a data frame with the x and y coordinates of where I want the text to go on the plot, and a column for the label, is how I approach adding text labels to an existing ggplot.\n\n# define function for pts\npts &lt;- function(x){\n    as.numeric(grid::convertX(grid::unit(x, \"points\"), \"mm\"))\n  }\n\n# calculate n for putting each species\n# remove NAs because they are not in the plot\nd_n &lt;- filter(d, !is.na(bill_length_mm)) %&gt;%\n  group_by(species) %&gt;%\n  summarise(n = n(),\n            max_bill_length = max(bill_length_mm)) %&gt;%\n  ungroup()\n\n# make plot with text\n# make next box plot with raw points\np1 +\n  geom_text(aes(x = species, y = max_bill_length + 5, label = paste('n = ', n, sep = '')), d_n, size = pts(12), col = 'black') # add text label\n\n\n\n\n\n\n\n\n\n\nSoft wrap or stagger text labels to stop them overlapping\nOk these two are quite recent finds for me, and I absolutely love them. Sometimes your x labels might be really long, and the text can overlap with each other. I used to manually add new lines into my text by inserting \\n where I wanted new text to me. But now two approaches exist that can automatically improve spacing between labels on the x axis. These are scales::label_wrap which can automatically create new lines for long axis labels and guide_axis() which can stagger axis labels to prevent overlapping.\nWe will demonstrate them both below, by adding the Latin names for each penguin species to the dataset. We will add them in using case_when() and then show both plots next to each other using patchwork which makes it really easy to combine individual plots. For free you also get code to italicise the axis labels as they are latin names!\n\nd &lt;- mutate(d, latin_name = case_when(species == \"Gentoo\" ~ \"Pygoscelis papua\",\n                                      species == \"Chinstrap\" ~ \"Pygoscelis antarcticus\",\n                                      species == \"Adelie\" ~ \"Pygoscelis adeliae\"))\n\n# first to softwrap the text\np2 &lt;- ggplot(d, aes(latin_name, bill_length_mm, col = species, fill = species)) + # add first empty plot layer\n  geom_boxplot(outlier.shape = NA) + # add boxplot, do not plot the outliers\n  stat_summary(geom = \"crossbar\", fatten = 2, color = \"white\", width = 0.4, \n               fun.data = function(x){return(c(y = stats::median(x), ymin = stats::median(x), ymax = stats::median(x)))}) + # add median line to the boxplots\n  geom_jitter(width = 0.2, shape = 21, fill = 'white') + # add jittered raw points\n  theme_bw(base_size = 14) + # change theme to the one I like (others are available)\n  labs(x = 'Species',\n       y = 'Bill length (mm)') + # change labels\n  ylim(c(30,65)) + # change y limits\n  guides(col = 'none',\n         fill = 'none') + # turn off legend\n  theme(axis.text.x = element_text(face = \"italic\")) + # italicise x axis labels\n  scale_x_discrete(labels = scales::label_wrap(10)) # soft wrap labels\n\np3 &lt;- p2 +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) # stagger axis labels\n\np2 + p3\n\n\n\n\n\n\n\n\nEither of these look great, but I think scales::label_wrap() is my favourite. So simple and so effective!\n\n\nAutomatically label facets with letters\nOne thing I often do is create faceted plots where each plot represents a different treatment or subset of the data. This is really easy to do with ggplot2 using facet_wrap(). However, the default facets are poorly labelled, are not numbered (generally with a, b, c for publications), and have a grey fill colour.\nHowever, these are all issues we can solve to create publication-ready facet labels. We will demonstrate this by plotting a different trait on each facet (bill length, bill depth, flipper length, body mass). We will create the long data using pivot_longer() and use case_when() to make sure the labels on each facet are formatted correctly (i.e.¬†spaces instead of underscores.\nWe can write a function to automatically label each facet, and change theme elements to align text and change the strip background colour.\n\nlong_format &lt;- d %&gt;%\n  mutate(id = 1:n()) %&gt;% # create column to id each individual penguin\n  pivot_longer(., cols = c(bill_length_mm:body_mass_g), names_to = 'trait', values_to = 'value') %&gt;% # go from wide to long format for the traits\n  mutate(facet_label = case_when(trait == 'bill_length_mm' ~ \"Bill Length (mm)\",\n                                 trait == \"bill_depth_mm\" ~ \"Bill Depth (mm)\",\n                                 trait == \"body_mass_g\" ~ \"Body Mass (g)\",\n                                 trait == \"flipper_length_mm\" ~ \"Flipper Length (mm)\"))\n\n# create function to add letter to facet labels\nletter_facets &lt;- function (string){\n    len &lt;- length(string)\n    string = paste(\"(\", letters[1:len], \") \", string, sep = \"\")\n    return(string)\n}\n\n# create plot\nggplot(long_format, aes(species, value, col = species, fill = species)) + # add first empty plot layer\n  geom_boxplot(outlier.shape = NA) + # add boxplot, do not plot the outliers\n  stat_summary(geom = \"crossbar\", fatten = 2, color = \"white\", width = 0.4, \n               fun.data = function(x){return(c(y = stats::median(x), ymin = stats::median(x), ymax = stats::median(x)))}) + # add median line to the boxplots\n  geom_jitter(width = 0.2, shape = 21, fill = 'white') + # add jittered raw points\n  theme_bw(base_size = 14) + # change theme to the one I like (others are available)\n  labs(x = 'Species',\n       y = 'Trait measurement') + # change labels\n  guides(col = 'none',\n         fill = 'none') +\n  facet_wrap(~facet_label, scales = 'free_y', labeller = labeller(facet_label = letter_facets)) + # facet by the label column so the text is correct \n  theme(strip.background = element_blank(),\n        strip.text = element_text(hjust = 0))\n\n\n\n\n\n\n\n\nBINGO THIS LOOKS SHAMAZING.\n\n\nBeautiful colour schemes with MetBrewer\nI take a lot of time looking at colours to use in my plots. I have used viridis before, the colour schemes from colorbrewer, and Pok√©mon inspired colour schemes using palettetown. If you are so inclined, I have also started writing a small package (BrewerUoE) to access the new University of Exeter colours in R.\nHowever, the most beautiful colour schemes I have ever seen are those provided by MetBrewer, which are palettes inspired by works at the Metropolitan Museum of Art in New York. They are just sensational, and easy to add directly to your plots! We show an example how to below, but there are more examples on MetBrewer‚Äôs GitHub.\n\np1 + \n  scale_color_manual(values=met.brewer(\"Klimt\", 3)) +\n  scale_fill_manual(values=met.brewer(\"Klimt\", 3))\n\n\n\n\n\n\nAdd a final NULL layer to allow you to comment out layers\nIt is common for me to play around with different layers and switch some on and off with a hashtag. If you hash out the final layer then the layer before it with a + carries on to the next set of code. If you add a final + NULL to the plot then this behaviour doesn‚Äôt happen.\nLets say we wanted to see the plot without the text labels. We can turn them off by hashtagging them out (in case we want to add them back in later), and the final NULL means the plot still works.\n\np1 +\n  #geom_text(aes(x = species, y = max_bill_length + 5, label = paste('n = ', n, sep = '')), d_n, size = pts(12), col = 'black') + # add text label\n  NULL # add NULL layer to allow easy commenting out of layers\n\n\n\n\n\n\n\n\n\n\nControl legend shapes and override legend appearance\nSometimes you colour text, lines, points with the same colours. When you do this, each of the legends for them get displayed in the legend overlaid with each other. To show this we will create a line plot of the relationship between\n\nggplot(d, aes(body_mass_g, bill_length_mm, col = species)) +\n  geom_point() +\n  stat_smooth(method = 'lm', se = FALSE) +\n  theme_bw()\n\n\n\n\n\n\n\n\nI do not like the legend with multiple geoms, to me it looks like a tram stop sign. Luckily there are easy ways to manually edit the legend.\nFirst we can switch off the legend of any of the elements using the argument show.legend.\n\nggplot(d, aes(body_mass_g, bill_length_mm, col = species)) +\n  geom_point() +\n  stat_smooth(method = 'lm', se = FALSE, show.legend = FALSE) +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis looks nicer. An alternative to this is to use key_glyph which allows you to control the shape of the legend.\n\nggplot(d, aes(body_mass_g, bill_length_mm, col = species)) +\n  geom_point() +\n  stat_smooth(method = 'lm', se = FALSE,  key_glyph = 'point') +\n  theme_bw()\n\n\n\n\n\n\n\n\nWe can also control the size of the shape in the legend by altering the legend defaults using the guides() function.\n\nggplot(d, aes(body_mass_g, bill_length_mm, col = species)) +\n  geom_point() +\n  stat_smooth(method = 'lm', se = FALSE, show.legend = FALSE) +\n  theme_bw() +\n  guides(colour = guide_legend(override.aes = list(size = 20)))\n\n\n\n\n\n\n\n\nOk that last size is a bit much. But you get the idea and now have the tools to manually edit your legend."
  },
  {
    "objectID": "posts/intro_to_ggplot2/index.html#awesome-ggplot2-extensions",
    "href": "posts/intro_to_ggplot2/index.html#awesome-ggplot2-extensions",
    "title": "intRos: Publication ready plots using ggplot2",
    "section": "Awesome ggplot2 extensions",
    "text": "Awesome ggplot2 extensions\ngpgplot2 is so popular as a plotting system that it has become its own ecosystem, with people developing tools and extensions to complement and build extra functionality to ggplot2. All of the extensions can be found here, but below are some of our favourites:\n\nggdist which provides geoms and stats for visualising distributions and uncertainty.\nggtree to make phylogenetic trees using ggplot2.\npatchwork for combining separate plots.\npalettetown for Pok√©mon themed colour schemes. Whats better than Charizard colours!"
  },
  {
    "objectID": "posts/intro_to_flextable/index.html",
    "href": "posts/intro_to_flextable/index.html",
    "title": "intRos: Reproducible tables with flextable",
    "section": "",
    "text": "As scientists we make A LOT of tables, be it of summary statistics, model parameter values, contrast tables, or anything else. It used to be common practice to copy these individually into Excel or Word and then create a table to insert into your work, but this is prone to errors. No one is perfect after all.\nThis problem has now been solved by a bunch of different packages that allow for tables to be created in R and exported to a variety of formats. This means that fewer mistakes are made, that tables can easily be remade if the data or stats change, and that the process of making your tables is completely reproducible. The R package we will introduce to do this today is flextable, but there are other options available we won‚Äôt cover here such as gt and huxtable. I love flextable because it seems infinitely customisable and produces tables that are formatted beautifully to go into research articles.\nflextable provides an easy and flexible way to create tables for reporting and presentations. It allows for customization of the table appearance, including cell borders, font styles, background color, and more. The package also supports different formats such as HTML, Microsoft Word, and PowerPoint. It is well suited for creating reports and presentations with a high level of formatting, while still being simple and straightforward to use. Additionally, flextable has a number of features that make it particularly useful for data visualisation, including the ability to merge cells, add custom functions for data formatting, and control the appearance of the table based on data values (i.e.¬†making p values that are &lt;0.05 bold).\nNote: There are likely to be more elegant ways to do some of the code we present here. If you know of a simpler/easier way then we would love for you to help contribute to this project."
  },
  {
    "objectID": "posts/intro_to_flextable/index.html#make-table-of-summary-stats",
    "href": "posts/intro_to_flextable/index.html#make-table-of-summary-stats",
    "title": "intRos: Reproducible tables with flextable",
    "section": "Make table of summary stats",
    "text": "Make table of summary stats\nIt is common to make tables summarising aspects of any given dataset. We will do that here with flextable. Lets say we want to know the averages and standard deviations of body mass, bill length and bill depth of the different penguins species split by sex.\nWe can easily do this using group_by() and summarise() in dplyr. More information on these functions can be found in our tidyverse intRo.\nAlso because I dislike the behavious of factors in R sometimes, we will first convert all columns that are factors into characters.\n\n# convert all columns that are factors into characters\nd &lt;- mutate(d, across(where(is.factor), as.character))\n\n# create summary data\nd_summary &lt;- group_by(d, species, sex) %&gt;%\n  summarise(\n    # calculate number in each group\n    num_penguins = n(),\n    # can use across to apply the same functions to multiple columns\n    across(c(bill_length_mm, bill_depth_mm, body_mass_g), list(mean = ~mean(.x, na.rm = TRUE), sd = ~sd(.x, na.rm = TRUE))),\n    # specify we want to drop the groups\n    .groups = 'drop')\n\n# look at our table\nd_summary\n\n# A tibble: 8 √ó 9\n  species   sex    num_penguins bill_length_mm_mean bill_length_mm_sd\n  &lt;chr&gt;     &lt;chr&gt;         &lt;int&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1 Adelie    female           73                37.3              2.03\n2 Adelie    male             73                40.4              2.28\n3 Adelie    &lt;NA&gt;              6                37.8              2.80\n4 Chinstrap female           34                46.6              3.11\n5 Chinstrap male             34                51.1              1.56\n6 Gentoo    female           58                45.6              2.05\n7 Gentoo    male             61                49.5              2.72\n8 Gentoo    &lt;NA&gt;              5                45.6              1.37\n# ‚Ñπ 4 more variables: bill_depth_mm_mean &lt;dbl&gt;, bill_depth_mm_sd &lt;dbl&gt;,\n#   body_mass_g_mean &lt;dbl&gt;, body_mass_g_sd &lt;dbl&gt;\n\n\nWe can see there are some NAs for the sex of the penguins. We can make these unknown using replace_na().\n\n# replace NAs in our sex column\nd_summary &lt;- mutate(d_summary, sex = replace_na(sex, 'unknown'))\n\nWe can immediately make this into a flextable using the flextable() function.\n\n# make our table into a flex table\ntable1 &lt;- flextable(d_summary)\n\ntable1\n\n\nspeciessexnum_penguinsbill_length_mm_meanbill_length_mm_sdbill_depth_mm_meanbill_depth_mm_sdbody_mass_g_meanbody_mass_g_sdAdeliefemale7337.257532.02888317.621920.94299273,368.836269.3801Adeliemale7340.390412.27713119.072601.01888564,043.493346.8116Adelieunknown637.840002.80232018.320001.26964563,540.000477.1661Chinstrapfemale3446.573533.10866917.588240.78112773,527.206285.3339Chinstrapmale3451.094121.56455819.252940.76127303,938.971362.1376Gentoofemale5845.563792.05124714.237930.54024934,679.741281.5783Gentoomale6149.473772.72059415.718030.74105965,484.836313.1586Gentoounknown545.625001.37447014.550000.81034974,587.500338.1937\n\n\nThis already looks pretty good. But we can now add layers of formatting onto this table. The layers of formatting work much like the layers of ggplot2. You start with the base level and each new command creates new formatting of the whole table. Because of this, the order of the commands can make a big difference.\nFor this table, we will do a few different things:\n\nrename the column names\nmerge the species column vertically to only have one instance of species\nround the numbers to 2 decimal places\nchange the font and font size\nplay around with the column names to create a tiered column name for each trait (bill length, bill depth, body mass)\nadd in some horizontal lines to split species apart\n\nWe can do this by adding new layers using the %&gt;%. Many of the functions involve you specifying what part you want the change to apply to (‚Äòall‚Äô, ‚Äòbody‚Äô, or ‚Äòheader‚Äô). Specific rows can be specified using the i argument, and columns using j.\nTo add a new header row, we need to create a new object which contains the text we want to add.\nFor each new thing we do, I have commented what the command is doing so that the code makes as much sense as possible.\n\n# text to be new header label\n# add same name for columns we want to merge later on\npars &lt;- as_paragraph(\n  as_chunk(c('Species', 'Sex', 'n', 'Bill Length (mm)', 'Beak Length (mm)', 'Body Mass (g)'))\n)\n\n\n# edit table1\ntable1 &lt;- flextable(d_summary) %&gt;%\n  # rename all column names\n  set_header_labels(species = 'Species',\n                    sex = 'Sex',\n                    num_penguins = 'n',\n                    bill_length_mm_mean = 'mean',\n                    bill_length_mm_sd = 'sd',\n                    bill_depth_mm_mean = 'mean',\n                    bill_depth_mm_sd = 'sd',\n                    body_mass_g_mean = 'mean',\n                    body_mass_g_sd = 'sd') %&gt;%\n  add_header_row(values = pars, colwidths = c(1, 1, 1, 2, 2, 2), top = TRUE) %&gt;% # add header row\n  merge_v(j = c(1,2,3), part = 'header') %&gt;%\n  merge_v(~species) %&gt;% # merge multiple instances of the same species name\n  fix_border_issues() %&gt;% # fix random border issues after merging\n  valign(valign = 'top', j = 1, part = 'body') %&gt;% # align Species column\n  colformat_double(j = c(4,5,6,7,8,9), digits = 2) %&gt;% # round numbers of specific columns to 2 decimal places\n  align(align = 'center', part = 'header') %&gt;% # align column names centrally\n  align(align = 'left', part = 'body') %&gt;% # align table output to the left\n  hline(i = c(3, 5), border = fp_border_default()) %&gt;% # add in custom horizontal lines to split penguins up\n  font(fontname = 'Times', part = 'all') %&gt;% # set font name for the table\n  fontsize(size = 12, part = 'all') %&gt;% # set font size for the table\n  autofit()\n  \n# view table\ntable1\n\n\nSpeciesSexnBill Length (mm)Beak Length (mm)Body Mass (g)meansdmeansdmeansdAdeliefemale7337.262.0317.620.943,368.84269.38male7340.392.2819.071.024,043.49346.81unknown637.842.8018.321.273,540.00477.17Chinstrapfemale3446.573.1117.590.783,527.21285.33male3451.091.5619.250.763,938.97362.14Gentoofemale5845.562.0514.240.544,679.74281.58male6149.472.7215.720.745,484.84313.16unknown545.621.3714.550.814,587.50338.19\n\n\nThis is looking really good now! We can now export this table in a variety of formats (suitable for word documents, as an image or for powerpoint). I will write an exhaustive list of them here, but I generally like using an image for as long as possible so that I do not have as many formatting issues when putting tables into Microsoft Word or Google Docs.\n\n# save as image\nsave_as_image(table1, 'where/to/save/table1.png', webshot = 'webshot2')\n\n# save for word document\nsave_as_docx(table1, 'where/to/save/table1.docx', align = 'center')\n\n# save for powerpoint\nsave_as_pptx(table1, path = 'where/to/save/table1.docx')"
  },
  {
    "objectID": "posts/intro_to_flextable/index.html#make-table-of-model-parameters",
    "href": "posts/intro_to_flextable/index.html#make-table-of-model-parameters",
    "title": "intRos: Reproducible tables with flextable",
    "section": "Make table of model parameters",
    "text": "Make table of model parameters\nWe can use very similar methods to summarise parameters from statistical models. To demonstrate this, I will fit a linear model looking at how body mass is different between species of penguins. We will then use emmeans() to extract model parameters and put them into a table.\n\n# do models\nmod1 &lt;- lm(body_mass_g ~ species, d)\nmod2 &lt;- lm(body_mass_g ~ 1, d)\n\n# check for significance using an anova\nanova(mod1, mod2)\n\nAnalysis of Variance Table\n\nModel 1: body_mass_g ~ species\nModel 2: body_mass_g ~ 1\n  Res.Df       RSS Df  Sum of Sq      F    Pr(&gt;F)    \n1    339  72443483                                   \n2    341 219307697 -2 -146864214 343.63 &lt; 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# super different\n\n# grab estimates for each species using emmeans\nd_params &lt;- emmeans(mod1, ~species)\n\nd_params\n\n species   emmean   SE  df lower.CL upper.CL\n Adelie      3701 37.6 339     3627     3775\n Chinstrap   3733 56.1 339     3623     3843\n Gentoo      5076 41.7 339     4994     5158\n\nConfidence level used: 0.95 \n\n\nWe can now turn this into a nice table using similar methods to those we used above.\n\n# text to be new header label\n# add same name for columns we want to merge later on\npars &lt;- as_paragraph(\n  as_chunk(c('Species', 'Body Mass (g)', 'd.f.'))\n)\n\ndata.frame(d_params) %&gt;%\n  # rejig column name orders to have degrees of freedom at the end\n  select(species, emmean, SE, lower.CL, upper.CL, df) %&gt;%\n  flextable() %&gt;%\n  set_header_labels(species = 'Species',\n                    emmean = 'Estimate',\n                    SE = 's.e.',\n                    df = 'd.f.',\n                    lower.CL = \"2.5%CI\",\n                    upper.CL = \"97.5%CI\") %&gt;%\n  add_header_row(values = pars, colwidths = c(1, 4, 1), top = TRUE) %&gt;% # add header row\n  merge_v(j = c(1,6), part = 'header') %&gt;% # merge column names together\n  italic(j = c(3, 6), part = 'header') %&gt;% # make some column names italic\n  colformat_double(j = c(2:5), digits = 2) %&gt;% # round numbers of specific columns to 2 decimal places\n  align(align = 'center', part = 'header') %&gt;% # align column names centrally\n  align(align = 'left', part = 'body') %&gt;% # align table output to the left\n  font(fontname = 'Times', part = 'all') %&gt;% # set font name for the table\n  fontsize(size = 12, part = 'all') %&gt;% # set font size for the table\n  autofit() # fix any random size issues\n\n\nSpeciesBody Mass (g)d.f.Estimates.e.2.5%CI97.5%CIAdelie3,700.6637.623,626.673,774.66339Chinstrap3,733.0956.063,622.823,843.36339Gentoo5,076.0241.684,994.035,158.00339\n\n\nNice. This table can easily be extended to have other parameters in, and this approach can be reused for countless types of models."
  },
  {
    "objectID": "posts/intro_to_flextable/index.html#make-table-of-contrasts",
    "href": "posts/intro_to_flextable/index.html#make-table-of-contrasts",
    "title": "intRos: Reproducible tables with flextable",
    "section": "Make table of contrasts",
    "text": "Make table of contrasts\nAnother common thing we might want to do is look at which (if any) species have significantly different body mass to each other. We can do this by doing post-hoc contrasts between the different species, given we know there is a significant effect of species on body mass.\nAgain we can look at this using emmeans().\n\ncontrasts &lt;- emmeans(mod1, pairwise ~ species)\ncontrasts$contrasts\n\n contrast           estimate   SE  df t.ratio p.value\n Adelie - Chinstrap    -32.4 67.5 339  -0.480  0.8807\n Adelie - Gentoo     -1375.4 56.1 339 -24.495  &lt;.0001\n Chinstrap - Gentoo  -1342.9 69.9 339 -19.224  &lt;.0001\n\nP value adjustment: tukey method for comparing a family of 3 estimates \n\n\nWe can easily turn this into a publication-ready table using flextable(). As the p values are so low, we will conver them to being &lt;0.0001 where appropriate, and convert that column to a character. This gives us more control over how flextable prints the output.\nThis is appropriate here but might not be the best way in other cases.\n\ncontrasts$contrasts %&gt;%\n  data.frame() %&gt;%\n  mutate(p.value = ifelse(p.value &lt; 0.0001, \"&lt;0.0001\", as.character(round(p.value, 2)))) %&gt;%\n  flextable() %&gt;%\n  set_header_labels(contrast = 'Contrast',\n                    emmean = 'Estimate',\n                    SE = 's.e.',\n                    df = 'd.f.',\n                    t.ratio = \"t-ratio\",\n                    p.value = \"p value\") %&gt;%\n  italic(j = c(3:6), part = 'header') %&gt;% # make some column names italic\n  colformat_double(j = c(2:6), digits = 2) %&gt;% # round numbers of specific columns to 2 decimal places\n  align(align = 'center', part = 'header') %&gt;% # align column names centrally\n  align(align = 'left', part = 'body') %&gt;% # align table output to the left\n  font(fontname = 'Times', part = 'all') %&gt;% # set font name for the table\n  bold(~p.value == \"&lt;0.0001\", j = \"p.value\") %&gt;% # make significant p values bold\n  fontsize(size = 12, part = 'all') %&gt;% # set font size for the table\n  autofit() # fix any random size issues\n\n\nContrastestimates.e.d.f.t-ratiop valueAdelie - Chinstrap-32.4367.51339.00-0.480.88Adelie - Gentoo-1,375.3556.15339.00-24.50&lt;0.0001Chinstrap - Gentoo-1,342.9369.86339.00-19.22&lt;0.0001"
  },
  {
    "objectID": "posts/install_rstudio_git/index.html",
    "href": "posts/install_rstudio_git/index.html",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "",
    "text": "R is one of the most popular programming language for statistical programming in ecology, evolution, and conservation. It is also the language taught in the University of Exeter‚Äôs undergraduate and masters courses within the Centre for Ecology and Conservation.\nRStudio is probably the most popular IDE for people using R. An IDE is an integrated development environment, which allows users to combine multiple aspects of software development in one place to make it easier to use. For RStudio, that means you have different panes that contain the R Console, your script, a file explorer, a pane where plots appear, and much more.\nGit is a version control system that allows you to track versions of your files. It is popular when programming to be able to keep a history of all the changes you have made to your work, and be able to retrieve old instances of your work if you have made a mistake later down the line.\nThis post gives some details on how to install R, RStudio, and git. This information is mainly aggregated from other sources (see acknowledgements below), but there is some specific advice for Windows users for University of Exeter staff and students."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#for-mac-users",
    "href": "posts/install_rstudio_git/index.html#for-mac-users",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "For Mac Users",
    "text": "For Mac Users\nMac users should click the ‚ÄúDownload R for macOS‚Äù link in the ‚ÄúDownload and Install R‚Äù section. Click on the link for the latest version of R and click on the ‚ÄúDownload R-[version].pkg‚Äù link to download the installer package. Open the downloaded file and follow the installation instructions. You can launch R by clicking the R icon on your Launchpad or in your Applications folder of your Finder, but we recommend using RStudio to code in R because it makes programming in R a much easier and more pleasant experience."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#for-windows-users",
    "href": "posts/install_rstudio_git/index.html#for-windows-users",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "For Windows Users",
    "text": "For Windows Users\nWindows users should click the ‚ÄúDownload R for Windows‚Äù link in the ‚ÄúDownload and Install R‚Äù section. Click on the ‚Äúbase‚Äù directory and click on the link for the latest version of R. Then click on the ‚ÄúDownload R[version] for Windows‚Äù link, open the downloaded file and follow the installation instructions. You can launch R by double-clicking the R icon on your Desktop or in your start menu, but we recommend using RStudio to code in R because it makes programming in R a much easier and more pleasant experience."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#some-general-tips-for-global-options-of-rstudio",
    "href": "posts/install_rstudio_git/index.html#some-general-tips-for-global-options-of-rstudio",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "Some general tips for Global Options of RStudio",
    "text": "Some general tips for Global Options of RStudio\nWhen setting up RStudio, there are a bunch of things you can change to configure your RStudio to how you like it. Some of these are likely personal, but we have some settings we like to use. These are settings you can change by clicking Tools -&gt; Global Options.\n\nUnclick ‚ÄúRestore .RData into workspace at startup‚Äù. This means that each time you start a new RStudio instance, your environment starts clean and you can be confident that any results you have, or weird R behaviour, is not due to any previous code or session.\n\n\n\n\nDo not restore Rdata\n\n\n\nUnclick ‚ÄúRestore most recently opened project at startup‚Äù. This means that when you start a new RStudio, it will open an RStudio not associated with a project. This is more of a personal preference of mine as more often than not I have multiple RStudio instances open not associated with the same work, and I got tired of closing the project of new RStudio instances.\n\n\n\n\nDo not restore most recent project\n\n\n\nIn the ‚ÄúCode‚Äù tab, tick ‚ÄúSoft-wrap R source files‚Äù. This means that instead of having long lines of code that go off of your source pane and require you to move from left-to-right to view them, the source pane instead ‚Äúsoft-wraps‚Äù them into a new line, while preserving the fact that they are, in fact, a single line of code.\n\n\n\n\nTurn on Soft wrap\n\n\n\nIn the ‚ÄúCode -&gt; Display‚Äù tab, unclick ‚ÄúShow Margin‚Äù which will get rid of the annoying line that can be present in the Source pane sometimes.\n\n\n\n\nTurn off Show margin\n\n\n\nI leave the default colours on for RStudio, but you can change to black background (and loads of other alternatives) in the ‚ÄúAppearance‚Äù tab."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#managing-where-your-r-packages-install",
    "href": "posts/install_rstudio_git/index.html#managing-where-your-r-packages-install",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "Managing where your R packages install",
    "text": "Managing where your R packages install\nOver many years, I have helped a fair few people at the University try and work out how to install R packages on their University computers. This has mainly been on Windows machines, and is most likely due to the lack of read/write access wherever R by default chooses to install packages.\nConsequently, it might be good for you to choose a new location on your computer where your R packages will install. And if you cannot install R packages at the moment then we are here to help! You can learn how to do change the default location your R packages install into by watching this video, but we will whizz through the process here too.\n\nCheck where R is installing packages by typing .libPaths() into your R console.\nCreate a new folder which you would like to install packages, somewhere where you DEFINITELY have read/write access (e.g.¬†‚Äú~/Desktop/r_packages‚Äù)\nWe can then change .libPaths() for this R session.\n\n\n\n\nChange where you R packages install in an individual session\n\n\n\nHowever, when we start a new R session, this change will be lost. To change it by default for R, we need to change our .Renviron file, which allows us to change variables that R looks for every time it starts. To easily manipulate this file, we will first install the R package usethis using install.packages(usethis). It should install into the new directory you have just created, for me it installed into ‚Äú~/Desktop/r_packages‚Äù.\nRun usethis::edit_r_environ() in your Console and it should open your .Renviron file in your source pane. From here, add R_LIBS_USER=‚Äú~/Desktop/r_packages‚Äù to it (obviously change the folder name to the folder you have created), click Save, and close the file.\n\n\n\n\nRun usethis::edit_r_environ\n\n\n\nNow when you start a new R instance, your chosen folder should be present when you run .libPaths() and you should not have problems installing R packages anymore!\n\n\n\n\n.libPaths() changes by default"
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#for-mac-users-1",
    "href": "posts/install_rstudio_git/index.html#for-mac-users-1",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "For Mac Users",
    "text": "For Mac Users\nGit can be installed on Mac from some of the options on the git website. Another alternative is GitHub Desktop, which will install the latest version of Git with itself if you do not already have it."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#for-windows-users-1",
    "href": "posts/install_rstudio_git/index.html#for-windows-users-1",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "For Windows Users",
    "text": "For Windows Users\nGit can be installed from gitforwindows, but if you install GitHub Desktop, the latest version of Git will be installed if you do not already have it. With GitHub Desktop, you get a command line version of Git with a robust GUI."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#make-a-github-profile",
    "href": "posts/install_rstudio_git/index.html#make-a-github-profile",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "Make a GitHub profile",
    "text": "Make a GitHub profile\nGit is version control on your local machine, to share code with other you should create a GitHub (or GitLab) profile. Information on setting up a GitHub account can be found here."
  },
  {
    "objectID": "posts/install_rstudio_git/index.html#configure-github-with-local-git-and-rstudio",
    "href": "posts/install_rstudio_git/index.html#configure-github-with-local-git-and-rstudio",
    "title": "intRos: Installing, R, RStudio, and Git",
    "section": "Configure GitHub with local git and RStudio",
    "text": "Configure GitHub with local git and RStudio\nNow we have git, R, and RStudio installed, and an RStudio profile, we need to make sure they can all talk each other, and that you can communicate with your GitHub profile from your local machine. An extensive walkthrough is available here, but we will cover the main steps.\nFirst, we need to create an access token so that GitHub can securely link your local computer to GitHub. To do this go to https://github.com/settings/tokens and create an access token. For the scopes, I ticked most that I thought would be useful and understood, which were gist, repo, user, workflow. Make sure you name it something useful like ‚ÄúR:GitHubPAT‚Äù so that is makes sense if you ever need to make a new token.\nOnce this code is created, save it to your clipboard or in a text editor while we are storing it in your RStudio. Once you close the webpage you will never see this token again, so make sure you make a note of it! Then going forwards, treat this access token as you would a password. For some of you that might mean using a password manager, and for some of you that might mean a book, your hand, or post it notes on your computer screen.\nWe will use the R package gitcreds to associate your GitHub PAT with RStudio. First install gitcreds using install.packages(‚Äògitcreds‚Äô). If you want a way to be able to install and load R packages from CRAN, GitHub, and Bioconductor in a simpler way without calls to both install.packages() and library(), then I recommend looking at librarian!\nNext run gitcreds::gitcreds_set() and follow the prompts. Specifically make sure you copy in your GitHub PAT!\n\n\n\ngitcreds_set()\n\n\nOnce you have set this, you can check it has stored properly using gitcreds::gitcreds_get().\nThis should mean you are ready to roll (i.e.¬†Git and GitHub like a boss), but if you are getting stuck some common troubleshoots can be found here.\nOne thing you can check is that RStudo knows where your git executable is. In Tools -&gt; Global Options, you can check where git is stored and being accessed from.\n\n\n\nCheck where RStudio is looking for git"
  },
  {
    "objectID": "series.html",
    "href": "series.html",
    "title": "Open and Reproducible Science Series",
    "section": "",
    "text": "We are excited to host a new monthly series of workshops and talks to promote Open and Reproducible Science at the University of Exeter Penryn campus.\nThis series will include invited speakers from both within and outside the department, covering the life-cycle of a research project including Pre-registration, Project management, Reproducibility, ChatGPT (and AI in general), and more.\n\nSchedule\nWhere: Exeter University Penryn campus\nWhen: Tuesdays from 3:00-5:00pm, once a month\nFeed me?: yes, there will be tea, coffee, and snacks\n\n\n\n\n\n\n\n\nDate\nLocation\nTopic\n\n\n\n\n20th June\nPeter Lanyon East Seminar 3\nProject management using R projects and version control\n\n\n11th July\nExchange Red\nAn introduction to open science and preregistration\n\n\n1st August\nESI Trevithick\nLet‚Äôs build R-Shiny web apps. For science!\n\n\n5th September\nESI Trevithick\nReproducible outputs: publication ready figures & tables\n\n\n3rd October\nESI Trevithick\nCoding with AI: using ChatGPT and co-pilot\n\n\nNovember\nTBC\nCloud computing at Exeter\n\n\n\nScheduled talks subject to change as the series evolves. Please check this website and look out for calendar invites for confirmed bookings and locations.\n\n\nPrevious workshops\n\n\n\nDate\nSpeakers\nTopic\nResources\n\n\n\n\n9th May 2023\nMark Hanson\nThe ghosts of journals past, present, and future\nTalk recording (accessible with University of Exeter account only)\n\n\n\n\n\nGet Involved\nWe welcome all levels of involvement in the series. If you would like to contribute a talk, workshop, or conversation topic on any subject linked to open and reproducible science, please get in touch with us by email or come and speak to us at an event.\nContact: a.trevail[@]exeter.ac.uk"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "",
    "text": "Welcome to the homepage of the Exeter Data Analytics Hub."
  },
  {
    "objectID": "index.html#what-is-the-exeter-data-analytics-hub",
    "href": "index.html#what-is-the-exeter-data-analytics-hub",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "What is the Exeter Data Analytics Hub?",
    "text": "What is the Exeter Data Analytics Hub?\nWe are an inter-college team of volunteers at the University of Exeter aiming to enhance ECR training in open and reproducible science."
  },
  {
    "objectID": "index.html#open-and-reproducible-science-series",
    "href": "index.html#open-and-reproducible-science-series",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "Open and Reproducible Science Series",
    "text": "Open and Reproducible Science Series\nWe host a monthly series of workshops and talks to promote Open and Reproducible Science throughout the life-cycle of a research project.\nVisit the Series page to find out more."
  },
  {
    "objectID": "index.html#intros-walkthroughs",
    "href": "index.html#intros-walkthroughs",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "intRos Walkthroughs",
    "text": "intRos Walkthroughs\nFind brief introductions and walkthroughs on common research programming activities on the Walkthroughs page."
  },
  {
    "objectID": "index.html#old-website-content",
    "href": "index.html#old-website-content",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "Old website content",
    "text": "Old website content\nThere are a bunch of excellent resources made by previous members of the University of Exeter. These were hosted on a previous version of this website.\n\nIntroduction to R by TJ McKinley\nAdvanced Visualisation and Data Wrangling in R [Data] [Slides] by TJ McKinley\nOpen Science and Reproducible Research in R by Diego Barneche\nR Scripting and R Markdown [Data and scripts] by TJ McKinley\nStatistical Modelling in R [Data] [Slides] by JJ Valletta and TJ McKinley\nMachine Learning [Data] [Slides][Slides2019] by Chris Yeomans and Jiangjiao Xu\nSpatial Data Analysis [Data] [Slides] by D March, James Duffy & Chris Yeomans\nImageJ GUI\nImageJ Macros\nIntroduction to Python\nPython for Data Analysis"
  },
  {
    "objectID": "index.html#contact-us",
    "href": "index.html#contact-us",
    "title": "Exeter Data Analytics Hub: Promoting Open and Reproducible Science",
    "section": "Contact us",
    "text": "Contact us\nIf you want to help contribute to this project or have any questions about any of our content, please do not hesitate to contact us."
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#workshop-outline",
    "href": "presentations/intro_to_github/intro_to_github.html#workshop-outline",
    "title": "Making reproducible projects",
    "section": "Workshop outline",
    "text": "Workshop outline\n\nWorkshop aims (reproducibility tools)\nIntroduction to version control\nOverview of git and GitHub\nUsing GitHub with R Studio\nIntegrating with R Studio Projects and here\nSome use-cases from us\nPractical (bring your problem code!)\nBonus session on data sharing! (w/ Matt Jones)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#three-aims",
    "href": "presentations/intro_to_github/intro_to_github.html#three-aims",
    "title": "Making reproducible projects",
    "section": "Three aims:",
    "text": "Three aims:\n\n \n\n\n\n+\n\n\n\n\n\n+\n\n\n{here}\n\n\n¬†\n¬†\n¬†\n¬†\n\n\n\nKnow basics of using git/GitHub for version control\n\n\n\n\nLearn how to create R Studio Projects\n\n\n\n\nUnderstand how the here package works"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#preparation",
    "href": "presentations/intro_to_github/intro_to_github.html#preparation",
    "title": "Making reproducible projects",
    "section": "Preparation",
    "text": "Preparation\n\nChecked git is installed\nSigned up for a GitHub account\nAuthenticated GitHub on your machine\n\n  \n\nLet us know if you are stuck on any of these\n(Extra guidance is on the Exeter data Analytics Hub)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#slide5-id",
    "href": "presentations/intro_to_github/intro_to_github.html#slide5-id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "Why use version control?\n\n\n\n\n\n\nVersion control allows us to:\n\nAvoid confusing file names\nKeep track of changes made over time\nTinker with code without worrying about breaking it\nEasily revert when code does break\nIntegrate with other software for online back-ups\n\n\n\n\n\n\ncomic: ‚ÄúPiled Higher and Deeper‚Äù by Jorge Cham (www.phdcomics.com)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#slide4-id",
    "href": "presentations/intro_to_github/intro_to_github.html#slide4-id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "Installed locally\nFree version control system (often pre-installed)\nManages the evolution of files in a sensible, highly structured way\nStructured around repositories (aka a ‚Äòrepo‚Äô) as units of organisation\n\n\n\n\n\n\n¬†\n¬†\n\n\n\nCloud-based\nHosting service for git-based projects (others: BitBucket, GitLab)\nSimilar to DropBox/Google Docs but better\nAllows others to see, synchronise with and contribute to your work"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#the-gitgithub-workflow",
    "href": "presentations/intro_to_github/intro_to_github.html#the-gitgithub-workflow",
    "title": "Making reproducible projects",
    "section": "The git/GitHub workflow",
    "text": "The git/GitHub workflow\n\nSpecific flow of actions that are usually followed:\n\n\n\nPull\n\n\nDownload everything from GitHub for the repo*\n\n\n\n\nStage\n\n\nAdd modified files to the commit queue\n\n\n\n\n\n\n\nCommit\n\n\nConfirm your changes locally (with message)\n\n\n\n\n\n\n\nPush\n\n\nUpload committed changes to GitHub\n\n\n\n\n\n\n\n\n\n*Optional ‚Äî but good practice to do when starting for the day"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#interacting-with-gitgithub",
    "href": "presentations/intro_to_github/intro_to_github.html#interacting-with-gitgithub",
    "title": "Making reproducible projects",
    "section": "Interacting with git/GitHub",
    "text": "Interacting with git/GitHub"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#the-gitgithub-workflow-rstudio",
    "href": "presentations/intro_to_github/intro_to_github.html#the-gitgithub-workflow-rstudio",
    "title": "Making reproducible projects",
    "section": "The git/GitHub workflow (RStudio)",
    "text": "The git/GitHub workflow (RStudio)\n\nSame flow:\n\n\n\n\nPull\n\n\n\n\n\n\n\nStage\n\n\n\n\n\n\n\n\n\n\nCommit\n\n\n\n\n\n\n\n\n\n\nPush"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#gitignore",
    "href": "presentations/intro_to_github/intro_to_github.html#gitignore",
    "title": "Making reproducible projects",
    "section": "¬†¬†¬†¬†¬†¬†¬†.gitignore",
    "text": ".gitignore\n\n\nText file that lists large/specific files you don‚Äôt want to sync\nExclude all files of one type with * wildcard (e.g., *.png)\n\n\n\nEdit the .gitignore file (left) or select files to exclude (right)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#slide11-id",
    "href": "presentations/intro_to_github/intro_to_github.html#slide11-id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "R Studio Projects"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#why-r-studio-projects-are-great",
    "href": "presentations/intro_to_github/intro_to_github.html#why-r-studio-projects-are-great",
    "title": "Making reproducible projects",
    "section": "¬†¬†¬†¬†¬†¬†¬†Why R Studio Projects are great:",
    "text": "Why R Studio Projects are great:\n\n\nEach Project file opens a new session and environment\nFile paths start relative to the .Rproj file (much shorter)\nImproves code reproducibility ‚Äî even better if you use here\n\n\n\nSelf-contained project folder makes a perfect GitHub repo:\n\n\n\nGuide to using R Studio projects can be found on the Exeter Data Analytics intros page"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#how-to-create-an-r-studio-project",
    "href": "presentations/intro_to_github/intro_to_github.html#how-to-create-an-r-studio-project",
    "title": "Making reproducible projects",
    "section": "How to create an R Studio project",
    "text": "How to create an R Studio project\n\nIn-depth guide to using R Studio projects can be found on the Exeter Data Analytics intros page"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#create-new-project-from-github-repo",
    "href": "presentations/intro_to_github/intro_to_github.html#create-new-project-from-github-repo",
    "title": "Making reproducible projects",
    "section": "Create new project from GitHub repo",
    "text": "Create new project from GitHub repo\n\nExample cloned repo can be found here: https://github.com/gkaramanis/aRtist"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#sec-slide10id",
    "href": "presentations/intro_to_github/intro_to_github.html#sec-slide10id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "{here}\n\n\n\n\n\nIllustration by Allison Horst"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#here-makes-filepaths-that",
    "href": "presentations/intro_to_github/intro_to_github.html#here-makes-filepaths-that",
    "title": "Making reproducible projects",
    "section": "{here} makes filepaths that:",
    "text": "{here} makes filepaths that:\n\nWork magically on both macOS & Windows (/ or \\)\nStart at the root of the repository (using .Rproj file)\n\n\nhere::here() will show the root of your project directory:\n\n#install.packages(\"here\")\nlibrary(here)\nhere()\n\n[1] \"/Users/sdjl201/Desktop/Exeter postdoc/GitHub repos/exeter-data-analytics.github.io\"\n\n\n\n\nThis path is included at the start of every filepath here creates\n\nRecommended reading: Project-oriented workflows by Jenny Bryant"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#using-here",
    "href": "presentations/intro_to_github/intro_to_github.html#using-here",
    "title": "Making reproducible projects",
    "section": "Using here:",
    "text": "Using here:\n\nFilepaths are created in a similar way to paste():\nWe list quoted names of folders, comma separated\n\n\nWe can create a test filepath to a folder within the repository:\n\nhere(\"data\",\"raw_data\") #creating a filepath to a folder within the repository\n\n[1] \"/Users/sdjl201/Desktop/Exeter postdoc/GitHub repos/exeter-data-analytics.github.io/data/raw_data\"\n\n\n\n\nCreate paths directly within a file/filename argument:\n\nread_csv(file = here(\"data\",\"raw_data\",\"data.csv\"))\nggsave(plot, filename = here(\"output\",\"figures\"))\n\n\n\nOr turn long paths into an object for regular use:\n\noutput_path &lt;- here(\"output\",\"movement\",\"figures\") ; output_path\n\n[1] \"/Users/sdjl201/Desktop/Exeter postdoc/GitHub repos/exeter-data-analytics.github.io/output/movement/figures\"\n\n\n\nggsave(plot, filename = here(output_path,\"plot1.png\"))"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#how-i-use-github",
    "href": "presentations/intro_to_github/intro_to_github.html#how-i-use-github",
    "title": "Making reproducible projects",
    "section": "How I use GitHub:",
    "text": "How I use GitHub:\n\n\nI usually start by making an empty repo on GitHub\nClone the empty repo to my machine as an R Studio Project\nCreate a few core folders (data, scripts, outputs)\nAdd relevant files and commit-push everything\nFire up a script and read in data with here\nUse pacman::p_load for loading packages\n‚Ä¶spend the next three hours faffing with ggplot"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#slide23-id",
    "href": "presentations/intro_to_github/intro_to_github.html#slide23-id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "‚Äì Intermission ‚Äì"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#slide24-id",
    "href": "presentations/intro_to_github/intro_to_github.html#slide24-id",
    "title": "Making reproducible projects",
    "section": "",
    "text": "Why you should share your data,  why you shouldn‚Äôt share it via GitHub,  and where you should share it instead.\n\n\nMatt Lloyd Jones"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#talk-outline",
    "href": "presentations/intro_to_github/intro_to_github.html#talk-outline",
    "title": "Making reproducible projects",
    "section": "Talk outline",
    "text": "Talk outline\n\nWhy you should share your data\nWhy you shouldn‚Äôt share your data via GitHub\nWhere you should share your data instead\n\n*Assuming you are permitted share your data"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#talk-outline-1",
    "href": "presentations/intro_to_github/intro_to_github.html#talk-outline-1",
    "title": "Making reproducible projects",
    "section": "Talk outline",
    "text": "Talk outline\n\nWhy you should share your data\nWhy you shouldn‚Äôt share your data via GitHub\nWhere you should share your data instead\n\n*Assuming you are permitted share your data"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#you-will-soon-have-to-share-your-data-anyway.",
    "href": "presentations/intro_to_github/intro_to_github.html#you-will-soon-have-to-share-your-data-anyway.",
    "title": "Making reproducible projects",
    "section": "You will soon have to share your data anyway.",
    "text": "You will soon have to share your data anyway.\n\n\n\nConcordat on Open Research Data  (signed by HEFCE, UKRI, Universities UK,  the Wellcome Trust and more) \nNational Institutes of Health (NIH) has required  its fundees to eventually make their data  publicly available (as of January 2023) \nUS Government moving towards a position  of making sharing data mandatory  where possible)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#like-sharing-code-sharing-data-improves-the-quality-of-your-science.",
    "href": "presentations/intro_to_github/intro_to_github.html#like-sharing-code-sharing-data-improves-the-quality-of-your-science.",
    "title": "Making reproducible projects",
    "section": "Like sharing code, sharing data improves the quality of your science.",
    "text": "Like sharing code, sharing data improves the quality of your science.\n\n\nIn the process of making your data  publication-ready, you will also  find yourself:\n\nFinding mistakes and correcting them\nMaking sure the data inputted and  outputted from your code is consistent\nImproving its documentation  (for future re-use - most likely by you!)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#your-code-wont-work-without-your-data.",
    "href": "presentations/intro_to_github/intro_to_github.html#your-code-wont-work-without-your-data.",
    "title": "Making reproducible projects",
    "section": "Your code won‚Äôt work without your data.",
    "text": "Your code won‚Äôt work without your data."
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#talk-outline-2",
    "href": "presentations/intro_to_github/intro_to_github.html#talk-outline-2",
    "title": "Making reproducible projects",
    "section": "Talk outline",
    "text": "Talk outline\n\nWhy you should share your data\nWhy you shouldn‚Äôt share your data via GitHub\nWhere you should share your data instead"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#you-cannot-assign-a-doi-to-a-github-repository.",
    "href": "presentations/intro_to_github/intro_to_github.html#you-cannot-assign-a-doi-to-a-github-repository.",
    "title": "Making reproducible projects",
    "section": "You cannot assign a DOI to a GitHub repository.",
    "text": "You cannot assign a DOI to a GitHub repository.\n\n\nLike your publication, your data  should have a persistent identifier  like a Digital Object Identifier (DOI)\nHowever, you can‚Äôt DOI your  GitHub repo, or versions of it!"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#memory-limits",
    "href": "presentations/intro_to_github/intro_to_github.html#memory-limits",
    "title": "Making reproducible projects",
    "section": "Memory limits",
    "text": "Memory limits\n\n\nSize of repository as a whole  cannot exceed 100 GB  (+ warnings &gt;75 GB and &gt;5GB)\nSize of an individual push  (which may contain multiple  files) cannot exceed 2 GB\nSize of each file in it cannot  exceed 100 MB (+ warnings &gt; 50GB)\nIn order to prevent negatively  impacting GitHub‚Äôs infrastructure"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#inconveniences-others",
    "href": "presentations/intro_to_github/intro_to_github.html#inconveniences-others",
    "title": "Making reproducible projects",
    "section": "Inconveniences others",
    "text": "Inconveniences others\n\n\nUsers who just want to play around  with your code are forced to download  all of your research data too  (potentially up to 100 GB!)\nSmaller repositories are faster to clone  and easier to work with"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#git-is-not-set-up-for-handling-data",
    "href": "presentations/intro_to_github/intro_to_github.html#git-is-not-set-up-for-handling-data",
    "title": "Making reproducible projects",
    "section": "git is not set up for handling data",
    "text": "git is not set up for handling data\n\n\ngit version control system is based  around code, not data.\ngit knows nothing about the structure of  common data formats we use  (e.g.¬†the tabular structure of CSV files)\nMay result in merge conflicts  emerging where there are none"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#talk-outline-3",
    "href": "presentations/intro_to_github/intro_to_github.html#talk-outline-3",
    "title": "Making reproducible projects",
    "section": "Talk outline",
    "text": "Talk outline\n\nWhy you should share your data\nWhy you shouldn‚Äôt share your data via GitHub\nWhere you should share your data instead"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#rawness-of-data",
    "href": "presentations/intro_to_github/intro_to_github.html#rawness-of-data",
    "title": "Making reproducible projects",
    "section": "Rawness of data",
    "text": "Rawness of data"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#rawness-of-data-1",
    "href": "presentations/intro_to_github/intro_to_github.html#rawness-of-data-1",
    "title": "Making reproducible projects",
    "section": "Rawness of data",
    "text": "Rawness of data"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#things-to-consider-when-choosing-somewhere-to-store-your-raw-data",
    "href": "presentations/intro_to_github/intro_to_github.html#things-to-consider-when-choosing-somewhere-to-store-your-raw-data",
    "title": "Making reproducible projects",
    "section": "Things to consider when choosing somewhere to store your raw data",
    "text": "Things to consider when choosing somewhere to store your raw data\n\n\nEasy to download/upload  data from/to via code\nLikely to stick around\nDOI-able"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#example-open-science-framework",
    "href": "presentations/intro_to_github/intro_to_github.html#example-open-science-framework",
    "title": "Making reproducible projects",
    "section": "Example: Open Science framework",
    "text": "Example: Open Science framework\n\n\nEasy to download/upload  via the osfr package\nHere to stay for the open  science revolution\nAllows you to assign DOIs  to projects and/or datasets"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#things-to-consider-when-choosing-somewhere-to-store-your-processed-data",
    "href": "presentations/intro_to_github/intro_to_github.html#things-to-consider-when-choosing-somewhere-to-store-your-processed-data",
    "title": "Making reproducible projects",
    "section": "Things to consider when choosing somewhere to store your processed data",
    "text": "Things to consider when choosing somewhere to store your processed data\n\nHigher memory limits\nCan store your final data in a  file structure (ideally alongside  the code that produced it)\nDOI-able"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#example-zenodo",
    "href": "presentations/intro_to_github/intro_to_github.html#example-zenodo",
    "title": "Making reproducible projects",
    "section": "Example: Zenodo",
    "text": "Example: Zenodo\n\n50GB file size limit\nYou can just zip up your local version  of your Github repository (with both  code and data) at the end of running  all your code/analysis, and upload it\nAllows you to assign a DOI to the  repository as a whole, as well as  to different versions of that repository  as it evolves through time  (and peer review)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#zenodo-example-expanded",
    "href": "presentations/intro_to_github/intro_to_github.html#zenodo-example-expanded",
    "title": "Making reproducible projects",
    "section": "Zenodo example expanded",
    "text": "Zenodo example expanded\n\nWould recommend NOT using the automated GitHub integration, because:\n\nThis only allows you to archive your code (since you‚Äôre not storing your data on GitHub anymore, right?)\nBy zipping up and uploading the final, populated repository from your local machine, you can upload data and code together\nManual option allows you to reserve a DOI for use in submitted manuscripts (before making the dataset public)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#storing-data-outside-of-github-but-in-a-repositories-friendly-to-github-keeps-everyone-happy",
    "href": "presentations/intro_to_github/intro_to_github.html#storing-data-outside-of-github-but-in-a-repositories-friendly-to-github-keeps-everyone-happy",
    "title": "Making reproducible projects",
    "section": "Storing data outside of GitHub, but in a repositories friendly to GitHub keeps everyone happy!",
    "text": "Storing data outside of GitHub, but in a repositories friendly to GitHub keeps everyone happy!"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#final-considerations",
    "href": "presentations/intro_to_github/intro_to_github.html#final-considerations",
    "title": "Making reproducible projects",
    "section": "Final considerations",
    "text": "Final considerations\n\n\nYou can prevent data from being uploaded (‚Äòpushed‚Äô) to your GitHub repository alongside changes to code by storing it in data folders (e.g.¬†‚Äòraw‚Äô and ‚Äòprocessed‚Äô folders) and including these in your .gitignore file\nFollowing this schema, raw data will be archived on both OSF and Zenodo - but duplication is good in terms of data preservation\nOSF and Zenodo are generic repositories, but sometimes a more structured, subject-specific repository is required (e.g.¬†NCBI or ENA for sequence data)\nYou should consider whether your institution/funder/etc require you to also upload and store the data elsewhere\nYou should consider whether you are allowed to share all of the data and/or whether you need to anonymise it (particularly raw data)"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#practical-time",
    "href": "presentations/intro_to_github/intro_to_github.html#practical-time",
    "title": "Making reproducible projects",
    "section": "Practical time!",
    "text": "Practical time!\nSpend the rest of the time either:\n\nCreating a new empty GitHub repo from scratch (‚≠êÔ∏è)\nClone a repo from someone else (‚≠êÔ∏è‚≠êÔ∏è)\nTurn an existing project into a GitHub repo (‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è)\n\n\nThen basically just a reproducible/collaborative coding session"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#resources",
    "href": "presentations/intro_to_github/intro_to_github.html#resources",
    "title": "Making reproducible projects",
    "section": "Resources",
    "text": "Resources\n\nExeDataHub: Installing, R, RStudio, and Git\nExeDataHub: Managing research projects with R Studio\nThe exceptional Happy Git and GitHub for the useR book\nOthers?"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#github-if-something-goes-wrong",
    "href": "presentations/intro_to_github/intro_to_github.html#github-if-something-goes-wrong",
    "title": "Making reproducible projects",
    "section": "GitHub: if something goes wrong",
    "text": "GitHub: if something goes wrong\n\nDealing with push errors\nErrors usually have suggestions\nGood idea to understand version conflicts\nAnd what options are to deal with them\nHow to implement these different options"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#acknowledgements",
    "href": "presentations/intro_to_github/intro_to_github.html#acknowledgements",
    "title": "Making reproducible projects",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nBackground images used courtesy of GitHub\nPhD comics used with permission from Jorge Cham\nIllustrations courtesy of Allison Horst"
  },
  {
    "objectID": "presentations/intro_to_github/intro_to_github.html#acknowledgements-1",
    "href": "presentations/intro_to_github/intro_to_github.html#acknowledgements-1",
    "title": "Making reproducible projects",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMATT ADD HERE"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "intRos: Walkthroughs",
    "section": "",
    "text": "The intRos walkthroughs are designed to be a place to provide brief introductions and walkthroughs for activities that are common when programming for research purposes. For example, using ggplot2 and making publication-ready plots. Or making reproducible tables in R using flextable. These intRos are aimed to be brief and designed to get you started using these tools. Throughout we highlight where we find information and our favourite resources for when we get stuck!\nWe hope that intRos will be added to through time by other members of the University. If you would like to contribute, please get in touch."
  },
  {
    "objectID": "posts.html#what-are-intros",
    "href": "posts.html#what-are-intros",
    "title": "intRos: Walkthroughs",
    "section": "",
    "text": "The intRos walkthroughs are designed to be a place to provide brief introductions and walkthroughs for activities that are common when programming for research purposes. For example, using ggplot2 and making publication-ready plots. Or making reproducible tables in R using flextable. These intRos are aimed to be brief and designed to get you started using these tools. Throughout we highlight where we find information and our favourite resources for when we get stuck!\nWe hope that intRos will be added to through time by other members of the University. If you would like to contribute, please get in touch."
  },
  {
    "objectID": "posts.html#get-started",
    "href": "posts.html#get-started",
    "title": "intRos: Walkthroughs",
    "section": "Get started",
    "text": "Get started\nAll of the available intRos can be found below. All of the reproducible quarto (.qmd) files can be found at the source GitHub repository for this website. You can navigate to each of the directories individually in the posts/ folder, or better still clone the repo using git clone and open the project in RStudio."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMaking reproducible projects\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  }
]