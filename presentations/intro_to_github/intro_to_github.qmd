---
title: "Making reproducible projects"
subtitle: "An introduction to version control with R Studio and GitHub"
title-slide-attributes:
  data-background-image: /presentations/intro_to_github/media/github_bg.png
  data-background-size: cover
  data-background-position: bottom right
  data-background-color: black
author: Stephen Lang, Dan Padfield <br> & Matt Jones
format: 
  revealjs:
    theme: [custom.scss]
    logo: /presentations/intro_to_github/media/slide_logo.png
    touch: true
    controls: true
    history: false #slide navigation not pushed to browser history
    auto-play-media: true
auto-animate: true
image: /presentations/intro_to_github/media/intro_to_github_thumbnail.png
---

## Workshop outline

1)  Workshop aims (reproducibility tools)
2)  Introduction to version control
3)  Overview of git and GitHub
4)  Using GitHub with R Studio
5)  Integrating with R Studio Projects and `here`
6)  Some use-cases from us
7)  Bonus session on data sharing! (w/ Matt Jones)
8)  Practical (bring your problem code!)

## Three aims:

::: {.fragment .fade-in-then-semi-out fragment-index="1"}
![](/presentations/intro_to_github/media/github_logo.png){.absolute top="105" left="168" width="155"} ![](/presentations/intro_to_github/media/git_logo.png){.absolute top="110" left="50" width="150"}
:::

::: {.fragment .fade-in-then-semi-out fragment-index="2"}
::: {.absolute style="font-size: 2.4em;" top="125" left="350"}
\+
:::

![](/presentations/intro_to_github/media/rstudio.png){.absolute top="110" left="420" width="150"}
:::

::: {.fragment .fade-in-then-semi-out fragment-index="3"}
::: {.absolute style="font-size: 2.4em;" top="125" left="600"}
\+
:::

::: {.absolute style="font-size: 2.3em;" top="125" left="670"}
`{here}`
:::
:::

 \
 \
 \
 \

::: {.fragment .fade-in-then-semi-out fragment-index="1" style="font-size: 1.1em;"}
-   **Know** basics of using git/GitHub for version control
:::

::: {.fragment .fade-in-then-semi-out fragment-index="2" style="font-size: 1.1em;"}
-   **Learn** how to create R Studio Projects
:::

::: {.fragment .fade-in-then-semi-out fragment-index="3" style="font-size: 1.1em;"}
-   **Understand** how the `here` package works
:::

## Preparation

::: {.absolute style="font-size: 1.2em; line-height: 3;" top="100" left="100"}
Checked git is installed

Signed up for a GitHub account

Authenticated GitHub on your machine
:::

![](/presentations/intro_to_github/media/git_logo.png){.absolute top="95" left="2" height="62"} ![](/presentations/intro_to_github/media/github_logo.png){.absolute top="175" left="2" height="60"} ![](/presentations/intro_to_github/media/lock_logo.png){.absolute top="250" left="6" height="64"}

::: {.absolute style="font-size: 1.2em;" bottom="150" left="0"}
**Let us know if you are stuck on any of these**

(Extra guidance is on the [Exeter data Analytics Hub](https://exeter-data-analytics.github.io/posts/install_rstudio_git/))
:::

##  {#slide5-id data-menu-title="Version control"}

::: {.fragment .fade-out fragment-index="1"}
![](/presentations/intro_to_github/media/github_logo.png){.absolute top="145" left="468" width="155"} ![](/presentations/intro_to_github/media/git_logo.png){.absolute top="150" left="350" width="150"}
:::

::: {.fragment .fade-out .absolute fragment-index="1" style="font-size: 2em;" top="370" left="100"}
**Why use version control?**
:::

::: {.fragment .fade-in-then-out fragment-index="1"}
![](/presentations/intro_to_github/media/phd_comics.gif){.absolute top="-20" left="270" height="200%"}
:::

::: {.fragment .fade-in-then-semi-out fragment-index="2"}
### **Version control allows us to:** {style="font-size: 1.5em;"}

-   Avoid confusing file names
-   Keep track of changes made over time
-   Tinker with code without worrying about breaking it
-   Easily revert when code does break
-   Integrate with other software for online back-ups
:::

::: {.fragment .fade-in fragment-index="3"}
![](/presentations/intro_to_github/media/git_name.png){.absolute bottom="100" left="150" height="100"}![](/presentations/intro_to_github/media/github_name.png){.absolute bottom="100" left="500" height="100"}
:::

::: footer
comic: "Piled Higher and Deeper" by Jorge Cham (www.phdcomics.com)
:::

##  {#slide4-id data-menu-title="git vs. github"}

::: columns
::: {.column width="48%"}
![](/presentations/intro_to_github/media/git_name.png){.absolute top="5" left="100" width="200"}

 \
 \

::: {style="font-size:37px"}
-   **Installed locally**
-   Free version control system (often pre-installed)
-   Manages the evolution of files in a sensible, highly structured way
-   Structured around repositories (aka a **'repo'**) as units of organisation
:::
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
![](/presentations/intro_to_github/media/github_name.png){.absolute top="0" left="630" width="350"}

 \
 \

::: {style="font-size:37px"}
-   **Cloud-based**
-   Hosting service for git-based projects (others: BitBucket, GitLab)
-   Similar to DropBox/Google Docs but better
-   Allows others to see, synchronise with and contribute to your work
:::
:::
:::

## The git/GitHub workflow

-   Specific flow of actions that are usually followed:

::: r-stack
::: {.fragment data-id="pull" fragment-index="1" style="background: #23C3CC; width: 200px; height: 70px; margin-left: 30px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Pull
:::

::: {.fragment fragment-index="1" style="margin-left: 340px; font-size: 0.8em;"}
**Download** everything from GitHub for the repo\*
:::
:::

::: r-stack
::: {.fragment data-id="stage" fragment-index="2" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF;"}
Stage
:::

::: {.fragment fragment-index="2" style="margin-left: 340px; margin-top: 50px; font-size: 0.8em"}
Add modified files to the commit queue
:::

::: {.fragment .fade-in-then-semi-out fragment-index="2"}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="246" left="160" height="45"}
:::
:::

::: r-stack
::: {.fragment data-id="commit" fragment-index="3" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Commit
:::

::: {.fragment fragment-index="3" style="margin-left: 340px;margin-top: 50px; font-size: 0.8em"}
Confirm your changes locally (with message)
:::

::: {.fragment .fade-in-then-semi-out fragment-index="3\""}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="367" left="160" height="45"}
:::
:::

::: r-stack
::: {.fragment data-id="push" fragment-index="4" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Push
:::

::: {.fragment fragment-index="4" style="margin-left: 340px;margin-top: 50px; font-size: 0.8em"}
**Upload** committed changes to GitHub
:::

::: {.fragment .fade-in-then-semi-out fragment-index="4\""}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="487" left="160" height="45"}
:::
:::

::: {.fragment .fade-in-then-semi-out fragment-index="5\""}
![](/presentations/intro_to_github/media/up_arrow.png){.absolute bottom="92" left="28" height="340"}
:::

::: footer
\*Optional --- but good practice to do when starting for the day
:::

## Interacting with git/GitHub

![](/presentations/intro_to_github/media/RStudio-Logo-flat.svg){.absolute top="105" left="0" height="100"}

::: {.fragment .semi-fade-out fragment-index="1"}
![](/presentations/intro_to_github/media/github_desktop.png){.absolute top="100" left="320" height="105"} ![](/presentations/intro_to_github/media/gitkraken_desktop.png){.absolute top="95" left="670" height="115"}
:::

::: {.fragment .fade-in fragment-index="1"}
![](/presentations/intro_to_github/media/github_rstudio.png){.absolute top="225" left="20" width="1200"}
:::

## The git/GitHub workflow (RStudio)

-   Same flow:

![](/presentations/intro_to_github/media/github_rstudio_tools.png){.absolute top="140" right="20" height="500"}

::: r-stack
::: {.fragment data-id="pull" fragment-index="1" style="background: #23C3CC; width: 200px; height: 70px; margin-left: 30px; margin-top: -12px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Pull
:::

::: {.fragment .fade-in-then-out fragment-index="1"}
![](/presentations/intro_to_github/media/red_circle.png){.absolute top="223" right="315" height="50"}
:::
:::

::: r-stack
::: {.fragment data-id="stage" fragment-index="2" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF;"}
Stage
:::

::: {.fragment .fade-in-then-semi-out fragment-index="2"}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="246" left="160" height="45"}
:::

::: {.fragment .fade-in-then-out fragment-index="2"}
![](/presentations/intro_to_github/media/red_circle.png){.absolute top="265" right="462" height="50"}
:::
:::

::: r-stack
::: {.fragment data-id="commit" fragment-index="3" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Commit
:::

::: {.fragment .fade-in-then-semi-out fragment-index="3"}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="367" left="160" height="45"}
:::

::: {.fragment .fade-in-then-out fragment-index="3"}
![](/presentations/intro_to_github/media/red_circle.png){.absolute top="225" right="375" height="50"}
:::
:::

::: r-stack
::: {.fragment data-id="push" fragment-index="4" style="background: #12C87B; width: 200px; height: 70px; margin-left: 80px; margin-top: 50px; padding: 0.01em; text-align: center; color: #FFFFFF"}
Push
:::

::: {.fragment .fade-in-then-semi-out fragment-index="4"}
![](/presentations/intro_to_github/media/down_arrow.png){.absolute top="487" left="160" height="45"}
:::

::: {.fragment .fade-in-then-out fragment-index="4"}
![](/presentations/intro_to_github/media/red_circle.png){.absolute top="225" right="275" height="50"}
:::
:::

::: {.fragment .fade-in-then-semi-out fragment-index="5"}
![](/presentations/intro_to_github/media/up_arrow.png){.absolute bottom="92" left="28" height="340"}
:::

::: {.fragment .fade-in-then-out fragment-index="5"}
![](/presentations/intro_to_github/media/red_circle.png){.absolute top="223" right="315" height="50"}
:::

##        .gitignore {data-menu-title="gitignore"}

![](/presentations/intro_to_github/media/gitignore.png){.absolute top="-50" left="-40" width="150"}

-   Text file that lists large/specific files you don't want to sync
-   Exclude all files of one type with `*` wildcard (e.g., `*.png`)

. . .

-   Edit the .gitignore file ([left]{style="color: #C00000;"}) or select files to exclude ([right]{style="color: #C00000;"})

![](/presentations/intro_to_github/media/gitignore_gui.png){.absolute bottom="100" left="20" width="1200"}

##  {#slide11-id data-menu-title="R Studio projects"}

![](/presentations/intro_to_github/media/rstudio.png){.absolute top="150" left="430" width="175"}

::: {.absolute top="370" left="230" style="font-size: 2em;"}
**R Studio Projects**
:::

##        Why R Studio Projects are great: {data-menu-title="Why R Studio projects are great"}

![](/presentations/intro_to_github/media/rstudio.png){.absolute top="-25" left="-30" width="100"}

-   Each Project file opens a new session and environment
-   File paths start relative to the .Rproj file (much shorter)
-   Improves code reproducibility --- even better if you use `here`

. . .

-   Self-contained project folder makes a perfect GitHub repo:

![](/presentations/intro_to_github/media/project_repo.png){.absolute bottom="80" left="40" width="1000"}

::: footer
Guide to using R Studio projects can be found on the [Exeter Data Analytics intros page](https://exeter-data-analytics.github.io/posts/intro_to_projects/)
:::

## How to create an R Studio project {.absolute top="100" right="50" background-video="/presentations/intro_to_github/media/new_project.mp4" background-video-loop="true" background-size="contain"}

::: footer
In-depth guide to using R Studio projects can be found on the [Exeter Data Analytics intros page](https://exeter-data-analytics.github.io/posts/intro_to_projects/)
:::

## Clone new project from GitHub repo {.absolute top="100" right="50" background-video="/presentations/intro_to_github/media/clone_repo.mp4" background-video-loop="true" background-size="contain"}

::: footer
Example cloned repo can be found here: <https://github.com/gkaramanis/aRtist>
:::

##  {#sec-slide10id data-menu-title="the {here} package"}

::: {.fragment .fade-out .absolute fragment-index="1" top="280" left="380" style="font-size: 2em;"}
**`{here}`**
:::

::: {.fragment .fade-in fragment-index="1"}
![](/presentations/intro_to_github/media/here_package.png){.absolute top="-20" left="150" width="800"}
:::

::: footer
Illustration by [Allison Horst](https://github.com/allisonhorst)
:::

## `{here}` makes filepaths that:

-   Work magically on both macOS & Windows (`/` or `\`)
-   Start at the root of the repository (using .Rproj file)

. . .

`here::here()` will show the root of your project directory:

```{r}
#| echo: true
#install.packages("here")
library(here)
here()
```

. . .

This path is included at the start of every filepath `here` creates

::: footer
Recommended reading: [Project-oriented workflows by Jenny Bryant](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)
:::

## Using `here`:

-   Filepaths are created in a similar way to `paste()`:
-   We list quoted names of folders, comma separated

::: {.fragment fragment-index="1"}
We can create a test filepath to a folder within the repository:

```{r}
#| echo: true
here("data","raw_data") #creating a filepath to a folder within the repository
```
:::

::: {.fragment .fade-in-then-out .absolute fragment-index="2" top="450"}
Create paths directly within a `file`/`filename` argument:

```{r}
#| echo: true
#| eval: false
read_csv(file = here("data","raw_data","data.csv"))
ggsave(plot, filename = here("output","figures"))
```
:::

::: {.fragment .fade-in .absolute fragment-index="3" top="450"}
Or turn long paths into an object for regular use:

```{r}
#| echo: true
#| eval: true
output_path <- here("output","movement","figures") ; output_path
```

```{r}
#| echo: true
#| eval: false
ggsave(plot, filename = here(output_path,"plot1.png"))
```
:::

## How I use GitHub:

::: incremental
-   I usually start by making an empty repo on GitHub
-   Clone the empty repo to my machine as an R Studio Project
-   Create a few core folders (data, scripts, outputs)
-   Add relevant files and commit-push everything
-   Fire up a script and read in data with `here`
-   Use `pacman::p_load` for loading packages
-   ...spend the next three hours faffing with ggplot
:::

##  {#slide23-id data-menu-title="Intermission" background-color="black"}

::: {.absolute style="font-size: 1.5em;" top="300" left="300"}
-- Intermission --
:::

##  {#slide24-id data-menu-title="Why you should share your data"}

::: {.absolute top="0" left="0" style="font-size: 1.4em;"}
**Why you should share your data,** <br> **why you shouldn't share it via GitHub,** <br> **and where you should share it instead.**
:::

::: {.absolute style="font-size: 1.4em;" bottom="330" left="0"}
Matt Lloyd Jones
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/ukrn_logo10_2.jpg){.absolute bottom="50" left="" width="200"}
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/sadmona.png){.absolute bottom="0" right="50" width="500"}
:::

## Talk outline

1)  Why you should share your data
2)  Why you shouldn't share your data via GitHub
3)  Where you should share your data instead

\*Assuming you are permitted share your data

## Talk outline

1)  **Why you should share your data**
2)  Why you shouldn't share your data via GitHub
3)  Where you should share your data instead

\*Assuming you are permitted share your data

## You will soon have to share your data anyway.

<br>

::: {style="font-size:30px"}
-   Concordat on Open Research Data <br> (signed by HEFCE, UKRI, Universities UK, <br> the Wellcome Trust and more) <!-- https://www.wlv.ac.uk/research/research-policies-procedures--guidelines/research-data-management/concordat-on-open-research-data/ -->
-   National Institutes of Health (NIH) has required <br> its fundees to eventually make their data <br> publicly available (as of January 2023) <!-- https://www.nature.com/articles/d41586-022-00402-1 -->
-   US Government moving towards a position <br> of making sharing data mandatory <br> where possible)
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/usgov_data.png){.absolute bottom="100" right="0" width="400"}
:::

## Like sharing code, sharing data improves the quality of your science.

::: {style="font-size:30px"}
<br>

In the process of making your data <br> publication-ready, you will also <br> find yourself:

-   Finding mistakes and correcting them
-   Making sure the data inputted and <br> outputted from your code is consistent
-   Improving its documentation <br> (for future re-use - most likely by you!)
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/keyboard_clean.png){.absolute bottom="100" right="0" width="500"}
:::

## Your code won't work without your data.

::: {.column width="100%"}
![](/presentations/intro_to_github/media/datanotfound.png){.absolute bottom="250" right="25" width="1200"}
:::

# However, within reason, you shouldn't store research data in your GitHub repository.

## Talk outline

1)  Why you should share your data
2)  **Why you shouldn't share your data via GitHub**
3)  Where you should share your data instead

## You cannot assign a DOI to a GitHub repository.

<br>

-   Like your publication, your data <br> should have a persistent identifier <br> like a Digital Object Identifier (DOI)
-   However, you can't DOI your <br> GitHub repo, or versions of it!

::: {.column width="50%"}
![](/presentations/intro_to_github/media/doi_logo.png){.absolute bottom="125" right="0" width="400"}
:::

## Memory limits

::: {style="font-size:35px"}
-   Size of repository as a whole <br> cannot exceed 100 GB <br> (+ warnings \>75 GB and \>5GB)
-   Size of an individual push <br> (which may contain multiple <br> files) cannot exceed 2 GB
-   Size of each file in it cannot <br> exceed 100 MB (+ warnings \> 50GB)
-   In order to prevent negatively <br> impacting GitHub's infrastructure
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/goldfish.jpg){.absolute bottom="150" right="0" width="500"}
:::

<!-- https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github -->

<!-- https://economictimes.indiatimes.com/defaultinterstitial.cms -->

<!-- https://stackoverflow.com/questions/38768454/repository-size-limits-for-github-com -->

## Inconveniences others

<br>

-   Users who just want to play around <br> with your code are forced to download <br> all of your research data too <br> (potentially up to 100 GB!)
-   Smaller repositories are faster to clone <br> and easier to work with

::: {.column width="50%"}
![](/presentations/intro_to_github/media/atlas.jpg){.absolute bottom="50" right="0" width=""}
:::

<!-- https://pixabay.com/vectors/atlas-world-greek-mythology-titan-7337047/ -->

## git is not set up for handling data

<br>

-   git version control system is based <br> around code, not data.
-   git knows nothing about the structure of <br> common data formats we use <br> (e.g. the tabular structure of CSV files)
-   May result in merge conflicts <br> emerging where there are none

<!-- https://paulfitz.github.io/2014/07/09/diff-merge-csv.html -->

<!-- https://www.dolthub.com/blog/2022-04-27-data-version-control/ -->

::: {.column width="50%"}
![](/presentations/intro_to_github/media/hammering_a_screw.jpg){.absolute bottom="100" right="0" width=""}
:::

# GitHub is the record book of your science, not the vault in which that record book should be kept.

## Talk outline

1)  Why you should share your data
2)  Why you shouldn't share your data via GitHub
3)  **Where you should share your data instead**

## Rawness of data

::: {.column width="50%"}
![](/presentations/intro_to_github/media/sauce_ingredients.jpg){.absolute bottom="220" left="0" width="350"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/sauce_pot.png){.absolute bottom="220" left="400" width="350"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/sauce_jar.png){.absolute bottom="150" right="0" width="340"}
:::

## Rawness of data

::: {.column width="50%"}
![](/presentations/intro_to_github/media/rawdata_statology.png){.absolute bottom="220" left="0" width="325"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/partlyprocesseddata_statology.png){.absolute bottom="246" left="350" width="325"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/processeddata_statology.png){.absolute bottom="220" right="0" width="340"}
:::

<!-- https://www.statology.org/raw-data/ -->

## Things to consider when choosing somewhere to store your raw data

<br>

-   Easy to download/upload <br> data from/to via code
-   Likely to stick around
-   DOI-able

::: {.column width="50%"}
![](/presentations/intro_to_github/media/atm.jpg){.absolute bottom="125" right="0" width=""}
:::

## Example: Open Science framework

<br>

-   Easy to download/upload <br> via the `osfr` package
-   Here to stay for the open <br> science revolution
-   Allows you to assign DOIs <br> to projects and/or datasets

::: {.column width="50%"}
![](/presentations/intro_to_github/media/osf_black.png){.absolute bottom="400" right="150" width="340"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/osfr_hexlogo.png){.absolute bottom="100" right="50" width="250"}
:::

## Things to consider when choosing somewhere to store your processed data

-   Higher memory limits
-   Can store your final data in a <br> file structure (ideally alongside <br> the code that produced it)
-   DOI-able

::: {.column width="50%"}
![](/presentations/intro_to_github/media/elephant_white_background.png){.absolute bottom="110" right="50" width="400"}
:::

<!-- https://commons.wikimedia.org/wiki/File:Elephant_white_background.png -->

## Example: Zenodo

-   50GB file size limit
-   You can just zip up your local version <br> of your Github repository (with both <br> code and data) at the end of running <br> all your code/analysis, and upload it
-   Allows you to assign a DOI to the <br> repository as a whole, as well as <br> to different versions of that repository <br> as it evolves through time <br> (and peer review) <!-- - Becomes like a frozen archive of your repository throughout its evolution  -->

::: {.column width="50%"}
![](/presentations/intro_to_github/media/zenodo_logo.png){.absolute bottom="500" right="50" width="300"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/zenodo_doiversioning.jpeg){.absolute bottom="100" right="40" width="310"}
:::

## Zenodo example expanded

::: {style="font-size:30px"}
**Would recommend NOT using the automated GitHub integration, because:**

-   This only allows you to archive your code (since you're not storing your data on GitHub anymore, right?)
-   By zipping up and uploading the final, populated repository from your local machine, you can upload data and code together
-   Manual option allows you to reserve a DOI for use in submitted manuscripts (before making the dataset public)
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/github_zenodo_auto.png){.absolute bottom="50" left="300" width="400"}
:::

::: {.column width="50%"}
![](/presentations/intro_to_github/media/cross.png){.absolute bottom="0" left="350" width="300"}
:::

## Storing data outside of GitHub, but in a repositories friendly to GitHub keeps everyone happy!

::: {.column width="100%"}
![](/presentations/intro_to_github/media/sadmona.png){.absolute bottom="58" left="5" width="400"}
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/arrow-icon-vector.jpg){.absolute bottom="150" left="425" width="200"}
:::

::: {.column width="100%"}
![](/presentations/intro_to_github/media/happymona.png){.absolute bottom="50" left="650" width="350"}
:::

## Final considerations

::: {.incremental style="font-size:30px"}
-   You can prevent data from being uploaded ('pushed') to your GitHub repository alongside changes to code by storing it in data folders (e.g. 'raw' and 'processed' folders) and including these in your .gitignore file
-   Following this schema, raw data will be archived on both OSF and Zenodo - but duplication is good in terms of data preservation
-   OSF and Zenodo are generic repositories, but sometimes a more structured, subject-specific repository is required (e.g. NCBI or ENA for sequence data)
-   You should consider whether your institution/funder/etc require you to also upload and store the data elsewhere
-   You should consider whether you are allowed to share all of the data and/or whether you need to anonymise it (particularly raw data)
:::

## Practical time!

**How to spend the rest of the time:**

-   Clone any GitHub repo (⭐️️)

    **Repos you could clone:** [CoppeR](https://github.com/padpadpadpad/CoppeR), [aRtist](https://github.com/gkaramanis/aRtist)

-   Creating a new empty GitHub repo from scratch (️⭐⭐️)

    **Resources:** [happygitwithr - new GitHub project](https://happygitwithr.com/new-github-first.html)

-   Turn an existing project into a GitHub repo (⭐️⭐️⭐️)

    **Resources:** (happygitwithr --- [GitHub first](https://happygitwithr.com/existing-github-first.html), [GitHub last](https://happygitwithr.com/existing-github-last.html))

. . .

**Feel free to ask us about your pesky code problems!**

## Resources

-   ExeDataHub: [Installing, R, RStudio, and Git](https://exeter-data-analytics.github.io/posts/install_rstudio_git/)
-   ExeDataHub: [Managing research projects with R Studio](https://exeter-data-analytics.github.io/posts/intro_to_projects/)
-   The exceptional [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) book
-   Others?

## Acknowledgements

-   UKRN for some original funding
-   Various resources made by others
